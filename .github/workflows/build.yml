# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build package

on:
  push:
    branches: [ "master" ]
  pull_request:
    types:
      - closed
      - opened
      - synchronize
    branches: [ "master" ]
    
  workflow_dispatch:
     inputs:
      workflow_02:
        description: 'ًWorkflow 2 which will be triggered'
        required: true
        default: 'workflow_02'

      workflow2_github_account:
        description: 'GitHub Account Owner'
        required: true
        default: 'huavanthong'

      workflow2_repo_github:
        description: 'GitHub Repository Name'
        required: true
        default: 'microservice-golang' 

  workflow_call:


env:
  CURRENT_RUNNER_ID: ${{ github.run_id }}
  GH_TOKEN: ${{ github.token }}
  MY_ENV_VAR: 

  
jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Clone python-microservice-base
      uses: GuillaumeFalourd/clone-github-repo-action@v2.3
      with:
        depth: 1
        branch: 'htv3hc/feat/dockerize-microservice-base'
        owner: 'test-fullautomation'
        repository: 'python-microservice-base'

    - name: Clone python-microservice-base
      uses: GuillaumeFalourd/clone-github-repo-action@v2.3
      with:
        depth: 1
        branch: 'htv3hc/feat/dockerize-cleware-service'
        owner: 'test-fullautomation'
        repository: 'python-microservice-cleware-switch'
    
    - name: Start all services
      shell: bash
      run: |
        wsl docker-compose -f "docker-compose.yml" up -d --build
        wsl docker-compose ps

    - name: Extract all services into images
      run: |
        docker ps
        echo "Hello World"
        docker image save --output devarserv_cleware-service.tar.gz devatserv_cleware-service
        echo "Hello World 1"
        docker image save --output devarserv-service-base.tar.gz multirepo_service-base

  #   - name: Build
  #     run: go build -v ./...

  #   - name: Test
  #     run: |
  #       go test -v ./... 2>&1 | tee -a tee console_log.txt
  #       mkdir logfile
  #       mv console_log.txt ./logfile
  #       ls -al
  #       ls -la ./logfile

  #   - name: Check test results
  #     run: |
  #       if [ $? -eq 0 ]; then
  #         echo "Tests passed!"
  #       else
  #         echo "Tests failed!"
  #         exit 1
  #       fi
    
  #   - name: Test python
  #     run: |
  #       python hello.py 2>&1 | tee output.txt
        
  #       exit_code=${PIPESTATUS[0]}

  #       if [ $exit_code -eq 255 ]; then
  #           echo "Script kết thúc với exit code 1."
  #           exit 1
  #       else
  #           echo "Script kết thúc với exit code khác 1."
  #       fi

  #   - name: Upload logs test
  #     if: success() || failure()
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: log-result
  #       path: |
  #         ${{ runner.workspace }}/logfile/*

  # collect-log:
  #   name: Collect console log
  #   runs-on: ubuntu-latest
  #   needs: build  
  #   steps:
  #   - name: Check out repo's default branch
  #     uses: actions/checkout@v3

  #   - name: Print Job ID
  #     run: |
  #       echo "Job ID from job1: $JOB1_JOB_ID"

  #   - name: Collect log 
  #     run: |
  #       echo "Current runner id: $CURRENT_RUNNER_ID"
  #       gh run view $CURRENT_RUNNER_ID --log > console_log.txt

  #   - name: Upload built package
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: upload log artifacts
  #       path: console_log.txt

  # display-result:
  #   name: Display result
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'

  #   steps:
  #     - name: Check out repo's default branch
  #       uses: actions/checkout@v3
  
  #     - name: Fetch Pipeline Results
  #       run: |
  #         # Set up your GitHub Personal Access Token (PAT)
  #         GH_TOKEN_SECRET=${{ secrets.GITHUB_TOKEN }}
          
  #         echo "${{ github.repository }}"

  #         # Get the GitHub Run ID for the current workflow run
  #         RUN_ID=$(curl -s -X GET -H "Authorization: Bearer $GH_TOKEN_SECRET" \
  #           "https://api.github.com/repos/${{ github.repository }}/actions/runs" | \
  #           jq -r '.workflow_runs[0].id')
          
  #         echo $RUN_ID
  
  #         # Fetch the workflow run details
  #         PIPELINE=$(curl -s -X GET -H "Authorization: Bearer $GH_TOKEN_SECRET" \
  #           "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID")

  #         echo "###########################################"
  #         # Print the pipeline details
  #         echo "$PIPELINE"

  #     - name: Create comment on PR
  #       run: |
  #         pipeline_result="PASS"

  #         GH_TOKEN_SECRET=${{ secrets.GITHUB_TOKEN }}

  #         # Sử dụng GitHub API để tạo bình luận
  #         curl -X POST -H "Authorization: token $GH_TOKEN_SECRET" \
  #         -d '{"body": "Kết quả của pipeline A: '"$pipeline_result"'"}' \
  #         "https://api.github.com/repos/${{ github.repository }}/issues/pull/9/comments"


  #     - name: Fetch Pipeline from Another Repository
  #       run: |
  #         sleep 180
  #         # Set up your GitHub Personal Access Token (PAT)
  #         GH_TOKEN_SECRET=${{ secrets.GITHUB_TOKEN }}
      
  #         # Define the target repository and branch
  #         TARGET_REPO="huavanthong/microservice-golang"
  #         BRANCH="master"  # Replace with the branch name you want to fetch the pipeline from
      
  #         # Get the GitHub Run ID for the workflow run of the target repository
  #         RUN_ID=$(curl -s -X GET -H "Authorization: Bearer $GH_TOKEN_SECRET" \
  #           "https://api.github.com/repos/$TARGET_REPO/actions/runs" | \
  #           jq -r ".workflow_runs[] | select(.head_branch == \"$BRANCH\").id")

  #         echo "Runner ID is $RUN_ID"
          
  #         echo "Sleep"
  #         if [ -n "$RUN_ID" ]; then
  #           # Fetch the details of the workflow run
  #           PIPELINE=$(curl -s -X GET -H "Authorization: Bearer $GH_TOKEN_SECRET" \
  #             "https://api.github.com/repos/$TARGET_REPO/actions/runs/$RUN_ID")
      
  #           # Print the pipeline details
  #           echo "$PIPELINE"
  #         else
  #           echo "No workflow run found for branch $BRANCH in repository $TARGET_REPO."
  #         fi
        