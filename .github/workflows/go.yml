# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    types:
      - closed
      - opened
      - synchronize
    branches: [ "master" ]
    
  workflow_dispatch:
     inputs:
      workflow_02:
        description: 'ًWorkflow 2 which will be triggered'
        required: true
        default: 'workflow_02'

      workflow2_github_account:
        description: 'GitHub Account Owner'
        required: true
        default: 'huavanthong'

      workflow2_repo_github:
        description: 'GitHub Repository Name'
        required: true
        default: 'microservice-golang' 

env:
  CURRENT_RUNNER_ID: ${{ github.run_id }}
  GH_TOKEN: ${{ github.token }}

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: |
        go test -v ./... 2>&1 | tee -a tee console_log.txt
        mkdir logfile
        mv console_log.txt ./logfile
        ls -al
        ls -la ./logfile

    - name: Check test results
      run: |
        if [ $? -eq 0 ]; then
          echo "Tests passed!"
        else
          echo "Tests failed!"
          exit 1
        fi
    
    - name: Test python
      run: |
        python hello.py 2>&1 | tee output.txt

        exit_code=${PIPESTATUS[0]}

        if [ $exit_code -eq -1 ]; then
            echo "Script kết thúc với exit code 1."
            exit 1
        else
            echo "Script kết thúc với exit code khác 1."
        fi

    - name: Upload logs test
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: log-result
        path: |
          ${{ runner.workspace }}/logfile/*

  collect-log:
    name: Collect console log
    runs-on: ubuntu-latest
    needs: build  
    steps:
    - name: Check out repo's default branch
      uses: actions/checkout@v3

    - name: Print Job ID
      run: |
        echo "Job ID from job1: $JOB1_JOB_ID"

    - name: Collect log 
      run: |
        echo "Current runner id: $CURRENT_RUNNER_ID"
        gh run view $CURRENT_RUNNER_ID --log > console_log.txt

    - name: Upload built package
      uses: actions/upload-artifact@v3
      with:
        name: upload log artifacts
        path: console_log.txt

  display-result:
    name: Display result
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Check out repo's default branch
        uses: actions/checkout@v3
  
      - name: Fetch Pipeline Results
        run: |
          # Set up your GitHub Personal Access Token (PAT)
          GH_TOKEN_SECRET=${{ secrets.GITHUB_TOKEN }}
          
          echo "${{ github.repository }}"

          # Get the GitHub Run ID for the current workflow run
          RUN_ID=$(curl -s -X GET -H "Authorization: Bearer $GH_TOKEN_SECRET" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs" | \
            jq -r '.workflow_runs[0].id')
          
          echo $RUN_ID
  
          # Fetch the workflow run details
          PIPELINE=$(curl -s -X GET -H "Authorization: Bearer $GH_TOKEN_SECRET" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID")

          echo "###########################################"
          # Print the pipeline details
          echo "$PIPELINE"

      - name: Create comment on PR
        run: |
          pipeline_result="PASS"

          GH_TOKEN_SECRET=${{ secrets.GITHUB_TOKEN }}

          # Sử dụng GitHub API để tạo bình luận
          curl -X POST -H "Authorization: token $GH_TOKEN_SECRET" \
          -d '{"body": "Kết quả của pipeline A: '"$pipeline_result"'"}' \
          "https://api.github.com/repos/${{ github.repository }}/issues/pull/9/comments"


      - name: Fetch Pipeline from Another Repository
        run: |
          sleep 180
          # Set up your GitHub Personal Access Token (PAT)
          GH_TOKEN_SECRET=${{ secrets.GITHUB_TOKEN }}
      
          # Define the target repository and branch
          TARGET_REPO="huavanthong/microservice-golang"
          BRANCH="master"  # Replace with the branch name you want to fetch the pipeline from
      
          # Get the GitHub Run ID for the workflow run of the target repository
          RUN_ID=$(curl -s -X GET -H "Authorization: Bearer $GH_TOKEN_SECRET" \
            "https://api.github.com/repos/$TARGET_REPO/actions/runs" | \
            jq -r ".workflow_runs[] | select(.head_branch == \"$BRANCH\").id")

          echo "Runner ID is $RUN_ID"
          
          echo "Sleep"
          if [ -n "$RUN_ID" ]; then
            # Fetch the details of the workflow run
            PIPELINE=$(curl -s -X GET -H "Authorization: Bearer $GH_TOKEN_SECRET" \
              "https://api.github.com/repos/$TARGET_REPO/actions/runs/$RUN_ID")
      
            # Print the pipeline details
            echo "$PIPELINE"
          else
            echo "No workflow run found for branch $BRANCH in repository $TARGET_REPO."
          fi
      
          
  trigger-build-aio:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Test
        run: |
          echo "GitHub Repository: $GITHUB_REPOSITORY"
          # Lấy giá trị của GITHUB_REF
          PR_BRANCH="${{ github.ref }}"
          
          # Trích xuất tên nhánh từ biến GITHUB_REF
          PR_BRANCH=${PR_BRANCH#refs/heads/}
          echo "Pull Request Branch: $PR_BRANCH"

          # Lấy giá trị của nhánh tạo pull request
          TARGET_BRANCH="${{ github.head_ref }}"
          echo "Pull Request Branch from variable github: $TARGEt_BRANCH"

          # curl -L \
          #   -X POST \
          #   -H "Accept: application/vnd.github+json" \
          #   -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          #   -H "X-GitHub-Api-Version: 2022-11-28" \
          #   https://api.github.com/repos/huavanthong/microservice-golang/dispatches \
          #   -d '{"event_type":"Trigger Workflow","client_payload":{"repository": "'"$GITHUB_REPOSITORY"'", "branch" : "'"$PR_BRANCH"'", "pull-branch": "'"$TARGET_BRANCH"'" }}'

          curl -X POST https://api.github.com/repos/huavanthong/microservice-golang/dispatches \
          --header 'authorization: Bearer ${{ secrets.ACTIONS_KEY }}' \
          -H 'Accept: application/vnd.github.everest-preview+json' \
          --data '{"event_type": "Trigger Workflow", "client_payload": { "repository": "'"$GITHUB_REPOSITORY"'", "branch" : "'"$TARGET_BRANCH"'", "pull-branch": "'"$TARGET_BRANCH"'" }}'

  check-pipeline:
    runs-on: ubuntu-latest
    needs: trigger-build-aio
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Install GitHub CLI
      #   run: |
      #     # Cài đặt GitHub CLI
      #     curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
      #     echo "deb [signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list
      #     sudo apt-get update
      #     sudo apt-get install gh

      - name: Wait for Pipeline Completion
        id: wait-for-pipeline
        run: |
          # Lấy thông tin pipeline
          while [[ "$(gh api repos/huavanthong/microservice-golang/actions/runs --jq '.workflow_runs | sort_by(.created_at) | last | .status')" != "completed" ]]; do
            sleep 60  # Chờ 60 giây trước khi kiểm tra lại
          done

      - name: Get Pipeline Result
        id: pipeline
        run: |
          # Lấy thông tin pipeline
          gh api repos/huavanthong/microservice-golang/actions/runs --jq '.workflow_runs | sort_by(.created_at) | last | .conclusion' > pipeline_status.txt
          gh api repos/huavanthong/microservice-golang/actions/runs --jq '.workflow_runs | sort_by(.created_at) | last | .url' > pipeline_link.txt


      - name: Check Pipeline Status
        run: |
          # Đọc kết quả pipeline từ file
          pipeline_status=$(cat pipeline_status.txt)
          pipeline_link=$(cat pipeline_link.txt)

          # Kiểm tra kết quả pipeline và báo cáo
          if [[ "$pipeline_status" == "success" ]]; then
            echo "Pipeline RobotFramework AIO success."
          else
            echo "Pipeline is not succeed."
            echo "Pipeline link: $pipeline_link"
            # Thực hiện các hành động bạn muốn nếu pipeline chưa hoàn thành
            exit 1
          fi

      - name: Update artifacts on repos microservice
        run: |
          # Đảm bảo bạn đã tạo một personal access token có quyền truy cập vào repository A và lưu nó trong secrets của repository B.
          REPO_A_TOKEN="${{ secrets.ACTIONS_KEY }}"
      
          # Đặt tên của artifacts mà bạn muốn tải lên
          ARTIFACT_NAME="your-artifact-name"
      
          # Tạo một release và lấy ID của release này
          RELEASE_ID=$(curl -X POST \
            -H "Authorization: token $REPO_A_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/owner/repoA/releases" | jq -r .id)
      
          # Tạo một upload URL cho artifacts trong release
          UPLOAD_URL="https://uploads.github.com/repos/huavanthong/microservice-golang/releases/$RELEASE_ID/assets?name=$ARTIFACT_NAME.zip"
      
          # Tải lên artifacts từ repository B vào repository A
          curl -X POST \
            -H "Authorization: token $REPO_A_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary "@artifact-name.zip" \
            "$UPLOAD_URL"
          