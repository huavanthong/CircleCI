name: Listen event from other

on:
  pull_request:
    types:
      - closed
      - opened
      - synchronize
    branches: [ "master" ]

  workflow_dispatch:
    
env:
  CURRENT_RUNNER_ID: ${{ github.run_id }}
  GH_TOKEN: ${{ github.token }}

jobs:
  trigger-build-aio:
    runs-on: ubuntu-latest
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Test
      run: |
        echo "GitHub Repository: $GITHUB_REPOSITORY"
        # Lấy giá trị của GITHUB_REF
        PR_BRANCH="${{ github.ref }}"
        
        # Trích xuất tên nhánh từ biến GITHUB_REF
        PR_BRANCH=${PR_BRANCH#refs/heads/}
        echo "Pull Request Branch: $PR_BRANCH"

        # Lấy giá trị của nhánh tạo pull request
        TARGET_BRANCH="${{ github.head_ref }}"
        echo "Pull Request Branch from variable github: $TARGEt_BRANCH"

        # curl -L \
        #   -X POST \
        #   -H "Accept: application/vnd.github+json" \
        #   -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
        #   -H "X-GitHub-Api-Version: 2022-11-28" \
        #   https://api.github.com/repos/huavanthong/microservice-golang/dispatches \
        #   -d '{"event_type":"Trigger Workflow","client_payload":{"repository": "'"$GITHUB_REPOSITORY"'", "branch" : "'"$PR_BRANCH"'", "pull-branch": "'"$TARGET_BRANCH"'" }}'

        curl -X POST https://api.github.com/repos/huavanthong/microservice-golang/dispatches \
        --header 'authorization: Bearer ${{ secrets.ACTIONS_KEY }}' \
        -H 'Accept: application/vnd.github.everest-preview+json' \
        --data '{"event_type": "Trigger Workflow", "client_payload": { "repository": "'"$GITHUB_REPOSITORY"'", "branch" : "'"$TARGET_BRANCH"'", "pull-branch": "'"$TARGET_BRANCH"'" }}'
  
  
  update-control-file:
    name: Update content
    runs-on: ubuntu-latest
    needs: [trigger-build-aio]
    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Set Up Git User
      run: |
        git config user.email "huavanthong14@gmail.com"
        git config user.name "Thong Hua"

    - name: Update contents
      run: |
        echo tag-$(date +%d.%m.%Y-%H.%M.%S) > content.txt 
      
    - name: Commit Changes
      run: |
        tag_version=$(cat content.txt)
        tag_branch=htv3hc/feat/$tag_version
        echo $tag_branch > tag_branch.txt

        git checkout -b $tag_branch
        git add content.txt
        git commit -m "Auto commit from GitHub Actions"
        git push -u origin $tag_branch

    - name: Create Pull Request
      run: |
        tag_branch=$(cat tag_branch.txt)
        gh pr create --base master --head $tag_branch --title "Auto-generated PR" --body "This PR was automatically generated by GitHub Actions."


  call-build-process:
    uses: ./.github/workflows/go.yml
    

  check-pipeline:
    runs-on: ubuntu-latest
    needs: trigger-build-aio
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # - name: Install GitHub CLI
    #   run: |
    #     # Cài đặt GitHub CLI
    #     curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
    #     echo "deb [signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list
    #     sudo apt-get update
    #     sudo apt-get install gh

    - name: Wait for Pipeline Completion
      id: wait-for-pipeline
      run: |
          # Lấy thông tin pipeline
          while [[ "$(gh api repos/huavanthong/microservice-golang/actions/runs --jq '.workflow_runs | sort_by(.created_at) | last | .status')" != "completed" ]]; do
          sleep 60  # Chờ 60 giây trước khi kiểm tra lại
          done

    - name: Get Pipeline Result
      id: pipeline
      run: |
        # Lấy thông tin pipeline
        gh api repos/huavanthong/microservice-golang/actions/runs --jq '.workflow_runs | sort_by(.created_at) | last | .conclusion' > pipeline_status.txt
        gh api repos/huavanthong/microservice-golang/actions/runs --jq '.workflow_runs | sort_by(.created_at) | last | .url' > pipeline_link.txt

    - name: Check Pipeline Status
      run: |
        # Đọc kết quả pipeline từ file
        pipeline_status=$(cat pipeline_status.txt)
        pipeline_link=$(cat pipeline_link.txt)

        # Kiểm tra kết quả pipeline và báo cáo
        if [[ "$pipeline_status" == "success" ]]; then
        echo "Pipeline RobotFramework AIO success."
        else
        echo "Pipeline is not succeed."
        echo "Pipeline link: $pipeline_link"
        # Thực hiện các hành động bạn muốn nếu pipeline chưa hoàn thành
        exit 1
        fi

    - name: Update artifacts on repos microservice
      run: |
        # Đảm bảo bạn đã tạo một personal access token có quyền truy cập vào repository A và lưu nó trong secrets của repository B.
        REPO_A_TOKEN="${{ secrets.ACTIONS_KEY }}"
    
        # Đặt tên của artifacts mà bạn muốn tải lên
        ARTIFACT_NAME="your-artifact-name"
    
        # Tạo một release và lấy ID của release này
        RELEASE_ID=$(curl -X POST \
        -H "Authorization: token $REPO_A_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        "https://api.github.com/repos/owner/repoA/releases" | jq -r .id)
    
        # Tạo một upload URL cho artifacts trong release
        UPLOAD_URL="https://uploads.github.com/repos/huavanthong/microservice-golang/releases/$RELEASE_ID/assets?name=$ARTIFACT_NAME.zip"
    
        # Tải lên artifacts từ repository B vào repository A
        curl -X POST \
        -H "Authorization: token $REPO_A_TOKEN" \
        -H "Content-Type: application/zip" \
        --data-binary "@artifact-name.zip" \
        "$UPLOAD_URL"
                  