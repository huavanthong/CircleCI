name: Trigger microservice

run-name: ${{ github.actor }} is testing out GitHub Actions 

on:
  pull_request:
    types:
      - closed
      - opened
      - synchronize
    branches: [ "master" ]

  workflow_dispatch:
  
  workflow_run:
    workflows: ["main"]
    branches: [master]
    types:
      - completed

env:
  CURRENT_RUNNER_ID: ${{ github.run_id }}
  GH_TOKEN: ${{ github.token }}

jobs:
  trigger-build-aio:
    # Avoid trigger microservice from automation branch
    if: github.event.pull_request.head.ref != 'automation/task/update-rfw-documents'
    runs-on: ubuntu-latest
    steps:
    - name: Run build
      run: |
        - echo "Pull request from branch ${{ github.event.pull_request.head.ref }}"
        - echo "Request to merge to branch ${{ github.event.pull_request.base.ref }}"

    - name: Test
      run: |
        echo "GitHub Repository: $GITHUB_REPOSITORY"
        # Lấy giá trị của GITHUB_REF
        PR_BRANCH="${{ github.ref }}"
        
        # Extract the branch name from GITHUB_REF variable
        PR_BRANCH=${PR_BRANCH#refs/heads/}
        echo "Pull Request Branch: $PR_BRANCH"

        # Getting the branch from pull request
        TARGET_BRANCH="${{ github.head_ref }}"
        echo "Pull Request Branch from variable github: $TARGEt_BRANCH"

        # curl -L \
        #   -X POST \
        #   -H "Accept: application/vnd.github+json" \
        #   -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
        #   -H "X-GitHub-Api-Version: 2022-11-28" \
        #   https://api.github.com/repos/huavanthong/microservice-golang/dispatches \
        #   -d '{"event_type":"Trigger Workflow","client_payload":{"repository": "'"$GITHUB_REPOSITORY"'", "branch" : "'"$PR_BRANCH"'", "pull-branch": "'"$TARGET_BRANCH"'" }}'

        curl -X POST https://api.github.com/repos/huavanthong/microservice-golang/dispatches \
        --header 'authorization: Bearer ${{ secrets.ACTIONS_KEY }}' \
        -H 'Accept: application/vnd.github.everest-preview+json' \
        --data '{"event_type": "Trigger Workflow", "client_payload": { "repository": "'"$GITHUB_REPOSITORY"'", "branch" : "'"$TARGET_BRANCH"'", "pull-branch": "'"$TARGET_BRANCH"'" }}'
  
  check-pipeline:
    # Avoid trigger microservice from automation branch
    if: github.event.pull_request.head.ref != 'automation/task/update-rfw-documents'
    runs-on: ubuntu-latest
    needs: trigger-build-aio
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Wait for Pipeline Completion
      id: wait-for-pipeline
      run: |
          # Getting info from main pipeline to wait the status
          while [[ "$(gh api repos/huavanthong/microservice-golang/actions/runs --jq '.workflow_runs | sort_by(.created_at) | last | .status')" != "completed" ]]; do
          sleep 60  # Chờ 60 giây trước khi kiểm tra lại
          done

    - name: Get Pipeline Result
      id: pipeline
      run: |
        # Getting info from main pipeline to get the result
        gh api repos/huavanthong/microservice-golang/actions/runs --jq '.workflow_runs | sort_by(.created_at) | last | .conclusion' > pipeline_status.txt
        gh api repos/huavanthong/microservice-golang/actions/runs --jq '.workflow_runs | sort_by(.created_at) | last | .url' > pipeline_link.txt

    - name: Check Pipeline Status
      run: |
        # Show off the result
        pipeline_status=$(cat pipeline_status.txt)
        pipeline_link=$(cat pipeline_link.txt)

        # Check the result and report
        if [[ "$pipeline_status" == "success" ]]; then
          echo "Pipeline RobotFramework AIO success."
        else
          echo "Pipeline is not succeed."
          echo "Pipeline link: $pipeline_link"
          # TODO: any next action
          exit 1
        fi

    - name: Update artifacts on repos microservice
      run: |
        # Make sure a PAT for accessing to repos
        REPO_A_TOKEN="${{ secrets.ACTIONS_KEY }}"
    
        # Artifact name
        ARTIFACT_NAME="your-artifact-name"
    
        # Create a release
        RELEASE_ID=$(curl -X POST \
        -H "Authorization: token $REPO_A_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        "https://api.github.com/repos/owner/repoA/releases" | jq -r .id)
    
        # Upload url in relase
        UPLOAD_URL="https://uploads.github.com/repos/huavanthong/microservice-golang/releases/$RELEASE_ID/assets?name=$ARTIFACT_NAME.zip"
    
        # Upload artifacts from repository B to repository A
        curl -X POST \
        -H "Authorization: token $REPO_A_TOKEN" \
        -H "Content-Type: application/zip" \
        --data-binary "@artifact-name.zip" \
        "$UPLOAD_URL"
                  